<main id="site-main">

    <a class="add-menu">
        +
    </a>

    <div class="dashboard-container">

        <h1><span class="mcd">McD</span>ini's Menu</h1>
        
        <a class="add-menu-btn">
                <span class="material-icons-sharp">add</span>
                New Menu
        </a>

        <form action="/dashboard" method="POST">
            <table class="menu-table">
                <thead>
                    <tr>
                        <th class="sortable">ID</th>
                        <th>Image</th>
                        <th class="sortable">Name</th>
                        <th class="sortable">Price</th>
                        <th class="sortable">Type</th>
                        <th>Action</th>
                    </tr>
                </thead>

                <tbody>
                    <% for(var i=0; i < menu.length; i++) { %>
                    <tr>
                        <td><%= i+1 %></td>
                        <td><img src="<%= menu[i].image %>" width="150px"></td>
                        <td data-name="<%= menu[i].name %>"><%= menu[i].name %></td>
                        <td><%= menu[i].price.toLocaleString() %></td>
                        <td><%= menu[i].type %></td>
                        <td>
                            <div class="menu-modify-btn">
                                <a class="menu-update" update-id="<%= menu[i]._id %>">
                                    <span class="material-icons-sharp">
                                        edit
                                    </span>
                                </a>

                                <a class="menu-delete" data-id="<%= menu[i]._id %>">
                                    <span class="material-icons-sharp">
                                        delete
                                    </span>
                                </a>
                            </div>
                        </td>
                    </tr>
                    <% } %>
                </tbody>
            </table>
        </form>
    </div>

    <div class="delete-menu-container">

        <div class="delete-menu-info">
            <img src="../assets/logo_mcd.png">
            <div class="delete-menu-text">
                <p class="delete-confirm">Are you sure you want to <span class="delete-highlight">delete</span> "Paket Berkah"?</p>
                <p class="delete-info">This item will be deleted immediately. You can't undo this action.</p>
            </div>
        </div>
        
        <div 
            onclick="document.querySelector('.delete-menu-container').style.display = 'none'"
            class="delete-menu-action-btn"
        >

            <a class="delete-btn">
                Delete
            </a>
            
            <a class="cancel-btn">
                Cancel
            </a>

        </div>
    </div>

    <div class="overlay"></div>

    <div class="new-menu-container">

        <div class="new-menu-input">
            <div class="new-menu-pics">
                <label for="input-file" id="drop-area">
                    <input type="file" accept="image/png" id="input-file" hidden>
                    <div id="img-view">
                        <img src="../assets/cloud_upload.svg">
        
                        <p>Drag and drop your image here<br>or<br>Browse to upload image</p>
                        <span>Recommended size: 240 x 180 px (.png)</span>
                    </div>
                </label>
            </div>
            
            <div class="new-menu-details">
                <h2>New Menu</h2>
    
                <form id="add_menus" class="form">
                    <div class="form-group">
                        <label for="name" class="details-title">Name</label><br>
                        <input type="hidden" name="id" value="">
                        <input type="text" name="name" value="" placeholder="Enter the menu's name..." required>
    
                        <div class="nameerror"></div>
                    </div>
    
                    <div class="form-group">
                        <label for="price" class="details-title">Price</label><br>
                        <input type="number" name="price" value="" placeholder="Enter the menu's price..." required>
    
                        <div class="pricerrror"></div>
                    </div>
    
                    <div class="form-group">
                        <label for="type" class="details-title">Type</label><br>
                        <select name="type">
                            <option value="Promotion">Promotion</option>
                            <option value="Ala Carte">Ala Carte</option>
                            <option value="Sides">Sides</option>
                            <option value="Desserts">Desserts</option>
                            <option value="Beverages">Beverages</option>
                            <option value="Cafe">Cafe</option>
                        </select>
    
                        <div class="typerror"></div>
                    </div>
                </form>
            </div>
        </div>
        
        <div class="new-menu-btn">
            <a class="save-btn-menu">Save</a>

            <a class="cancel-btn-menu">Cancel</a>
        </div>
    </div>

    <div class="update-menu-container">

        <div class="update-menu-input">
            <div class="update-menu-pics">
                <label for="input-file2" id="view-area">
                    <input type="file" accept="image/png" id="input-file2" hidden>
                    <div id="img-view2">
                    </div>
                </label>
            </div>
            
            <div class="update-menu-details">
                <h2>Update Menu</h2>
    
                <form id="update_menus" class="form">
                    <div class="form-group">
                        <label for="name" class="details-title">Name</label><br>
                        <input type="hidden" name="id2" value="">
                        <input type="text" name="name2" value="" placeholder="Enter the menu's name..." required>
    
                        <div class="nameerror"></div>
                    </div>
    
                    <div class="form-group">
                        <label for="price" class="details-title">Price</label><br>
                        <input type="number" name="price2" value="" placeholder="Enter the menu's price..." required>
    
                        <div class="pricerrror"></div>
                    </div>
    
                    <div class="form-group">
                        <label for="type" class="details-title">Type</label><br>
                        <select name="type2">
                            <option value="Promotion">Promotion</option>
                            <option value="Ala Carte">Ala Carte</option>
                            <option value="Sides">Sides</option>
                            <option value="Desserts">Desserts</option>
                            <option value="Beverages">Beverages</option>
                            <option value="Cafe">Cafe</option>
                        </select>
    
                        <div class="typerror"></div>
                    </div>
                </form>
            </div>
        </div>
        
        <div class="update-menu-btn">
            <a class="save-btn-menu2">Save</a>

            <a class="cancel-btn-menu2">Cancel</a>
        </div>
    </div>
</main>

<script>
    /**
     * 
     * @param {HTMLTableElement} table
     * @param {number} column The index of the column to sort
     * @param {boolean} asc Determines if the sorting will be in ascending
     */

    function sortTableByColumn(table, column, asc = true){
        const dirModifier = asc ? 1 : -1;
        const tBody = table.tBodies[0];
        const rows = Array.from(tBody.querySelectorAll("tr"));

        // Sort each row (kalau dia String)
        const sortedRows = rows.sort((a, b) => {
            const aColText = a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();
            const bColText = b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();

            return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
        });

        // Remove all existing TRs from the table
        while (tBody.firstChild){
            tBody.removeChild(tBody.firstChild);
        }

        // Re-add the newly sorted rows
        tBody.append(...sortedRows);

        // Remember how the column is currently sorted
        table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
        table.querySelector(`th:nth-child(${ column + 1 })`).classList.toggle("th-sort-asc", asc);
        table.querySelector(`th:nth-child(${ column + 1 })`).classList.toggle("th-sort-desc", !asc);
    }

    function sortTableByColumnNumerical(table, column, asc = true){
        const dirModifier = asc ? 1 : -1;
        const tBody = table.tBodies[0];
        const rows = Array.from(tBody.querySelectorAll("tr"));

        // Sort each row
        const sortedRows = rows.sort((a, b) => {
            const aColText = parseFloat(a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim());
            const bColText = parseFloat(b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim());

            // return aColText - bColText; // Perbandingan angka langsung
            return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
        });


        // Remove all existing TRs from the table
        while (tBody.firstChild){
            tBody.removeChild(tBody.firstChild);
        }

        // Re-add the newly sorted rows
        tBody.append(...sortedRows);

        // Remember how the column is currently sorted
        table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
        table.querySelector(`th:nth-child(${ column + 1 })`).classList.toggle("th-sort-asc", asc);
        table.querySelector(`th:nth-child(${ column + 1 })`).classList.toggle("th-sort-desc", !asc);
    }

    // sortTableByColumn(document.querySelector("table"), 1, true);

    document.querySelectorAll(".menu-table th").forEach(headerCell => {
        headerCell.addEventListener("click", () => {
            const tableElement = headerCell.parentElement.parentElement.parentElement;
            const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
            const currentIsAscending = headerCell.classList.contains("th-sort-asc");

            if ([2,4].includes(headerIndex)){
                // console.log(headerIndex)
                sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
            }
            if ([0,3].includes(headerIndex)){
                sortTableByColumnNumerical(tableElement, headerIndex, !currentIsAscending);
            }
        });
    })

    // Ketika tombol hapus diklik
    document.querySelectorAll('.menu-delete').forEach(deleteBtn => {
        deleteBtn.addEventListener('click', (e) => {
            e.preventDefault();

            // Dapatkan ID dan nama menu dari data-name atribut pada elemen terkait
            // const menuID = e.currentTarget.closest('tr').querySelector('td[data-id]').dataset.id;
            const menuID = e.currentTarget.getAttribute('data-id');
            const menuName = e.currentTarget.closest('tr').querySelector('td[data-name]').dataset.name;

            // Tampilkan nama menu pada pesan konfirmasi penghapusan
            document.querySelector('.delete-confirm').innerHTML = `Are you sure you want to <span class="delete-highlight">delete</span> "${menuName}"?`;

            // Tampilkan overlay
            const overlay = document.querySelector('.overlay');
            overlay.style.top = "0%";
            overlay.style.opacity = "1";
            overlay.classList.add("active");

            // Tampilkan kontainer penghapusan
            var deleteMenuContainer = document.querySelector('.delete-menu-container');
            deleteMenuContainer.style.display = 'block';
            deleteMenuContainer.style.top = '50%';
            deleteMenuContainer.style.transform = 'translate(-50%, -50%)';

            deleteMenuContainer.dataset.menuID = menuID;
        })
    })

    // Event listener untuk tombol pembatalan
    document.querySelector('.cancel-btn').addEventListener('click', () => {
        // Sembunyikan overlay
        const overlay = document.querySelector('.overlay');
        overlay.style.top = "-100%";
        overlay.style.opacity = "0";

        // Sembunyikan kontainer penghapusan
        const deleteMenuContainer = document.querySelector('.delete-menu-container');
        deleteMenuContainer.style.display = '150%';
        deleteMenuContainer.style.transform = 'translate(-50%, -50%)';
        deleteMenuContainer.style.display = 'none';
    });

    // Event listener untuk tombol add-menu-btn
    document.querySelector('.add-menu-btn').addEventListener('click', () => {
        // Tampilkan new-menu-container
        // const newMenuContainer = document.querySelector('.new-menu-container');

        // Tampilkan overlay
        const overlay = document.querySelector('.overlay');
        overlay.style.top = "0%";
        overlay.style.opacity = "1";
        overlay.classList.add("active");

        // Tampilkan new-menu-container
        var newMenuContainer = document.querySelector('.new-menu-container');
        newMenuContainer.style.display = 'block';
        newMenuContainer.style.top = '50%';
        newMenuContainer.style.transform = 'translate(-50%, -50%)';
    })

    // Event listener untuk tombol add-menu
    document.querySelector('.add-menu').addEventListener('click', () => {
        // Tampilkan new-menu-container
        // const newMenuContainer = document.querySelector('.new-menu-container');

        // Tampilkan overlay
        const overlay = document.querySelector('.overlay');
        overlay.style.top = "0%";
        overlay.style.opacity = "1";
        overlay.classList.add("active");

        // Tampilkan new-menu-container
        var newMenuContainer = document.querySelector('.new-menu-container');
        newMenuContainer.style.display = 'block';
        newMenuContainer.style.top = '50%';
        newMenuContainer.style.transform = 'translate(-50%, -50%)';
    })

    // Variabel untuk menampung gambar yang akan diunggah
    let queuedImage = null;

    // Event listener untuk upload image

    const dropArea = document.getElementById("drop-area");
    const inputFile = document.getElementById("input-file");
    const imageView = document.getElementById("img-view");

    inputFile.addEventListener("change", uploadImage);

    function uploadImage(){
        let imgLink = URL.createObjectURL(inputFile.files[0]);
        imageView.style.backgroundImage = `url(${imgLink})`;
        imageView.textContent = "";
        // imageView.style.border = 0;

        queuedImage = inputFile.files[0];
    }

    dropArea.addEventListener("dragover", function(e){
        e.preventDefault();
    });

    dropArea.addEventListener("drop", function(e){
        e.preventDefault();

        // Menambahkan gambar yang di-drop ke dalam queuedImage
        uploadImage();
    })

    // Event listener untuk tombol "Save"
    const saveButton = document.querySelector(".save-btn-menu");
    saveButton.addEventListener("click", sendQueuedImagesToServer);

    // const controller = require('../controllers/menuController');

    function saveMenuToServer(path) {
        const name = document.querySelector('input[name="name"]').value;
        const image = path;
        const price = document.querySelector('input[name="price"]').value;
        const type = document.querySelector('select[name="type"]').value;

        fetch('/menus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({name: name, price: price, image: image, type: type})
        })

        .then(response => {
            if (response.status !== 200) throw Error(response.statusText);
            location.reload();
        })

        .catch(error => {
            console.error("Error:", error);
        })
    }

    function sendQueuedImagesToServer() {
        // Pastikan ada gambar yang dipilih sebelum mengirim
        if (!queuedImage) {
            console.error("No image selected.");
            return;
        }

        const formData = new FormData();

        // Menambahkan gambar yanga da di queuedImage ke dalam formData
        formData.append("file", queuedImage);

        // Mengirim formData ke server
        
        fetch("/dashboard/upload", {
            method: "POST",
            body: formData
        })

        .then(response => {
            if (response.status !== 200) throw Error(response.statusText);
            return response.text();
        })

        .then(data => {
            // Data di sini akan berisi path file yang dikirim kembali oleh server
            pathfile = "../assets/menu/uploads/" + data;

            saveMenuToServer(pathfile);
        })

        .catch(error => {
            // serverMessage.innerHTML = error
            console.error("Error:", error);
        })
    }

    // Event listener untuk tombol edit menu
    document.querySelectorAll('.menu-update').forEach(updateBtn => {
        updateBtn.addEventListener('click', (e) => {
            e.preventDefault();

            // Ambil data menu dari tabel yang sesuai dengan ID yang dipilih
            const menuRow = e.currentTarget.closest('tr');
            const menuID = menuRow.querySelector('td:nth-child(1)').textContent.trim();
            const menuIDNumber = parseFloat(menuID)
            console.log(menuIDNumber);
            const menuIDdb = e.currentTarget.getAttribute('update-id');
            console.log(menuIDdb);
            const menuName = menuRow.querySelector('td[data-name]').textContent.trim();
            const menuPrice = menuRow.querySelector('td:nth-child(4)').textContent.trim();
            const priceWithoutCommas = menuPrice.replace(/,/g, ''); // Hilangkan tanda koma
            const menuPriceNumber = parseFloat(priceWithoutCommas);
            const menuType = menuRow.querySelector('td:nth-child(5)').textContent.trim();
            const menuImageSrc = menuRow.querySelector('img').getAttribute('src');

            // Isi formulir update menu dengan data yang relevan
            document.querySelector('input[name="id2"]').value = menuIDNumber;
            document.querySelector('input[name="name2"]').value = menuName;
            document.querySelector('input[name="price2"]').value = menuPriceNumber;
            document.querySelector('select[name="type2"]').value = menuType;
            document.querySelector('#img-view2').style.backgroundImage = `url(${menuImageSrc})`;

            // Tampilkan overlay
            const overlay = document.querySelector('.overlay');
            overlay.style.top = "0%";
            overlay.style.opacity = "1";
            overlay.classList.add("active");

            // Tampilkan kontainer update menu
            const updateMenuContainer = document.querySelector('.update-menu-container');
            updateMenuContainer.style.display = 'block';
            updateMenuContainer.style.top = '50%';
            updateMenuContainer.style.transform = 'translate(-50%, -50%)';

            updateMenuContainer.dataset.menuIDdb = menuIDdb;
        });
    });

    // Variabel untuk menampung gambar yang akan diunggah
    let queuedImage2 = null;

    // Event listener untuk upload image

    const dropArea2 = document.getElementById("view-area");
    const inputFile2 = document.getElementById("input-file2");
    const imageView2 = document.getElementById("img-view2");

    inputFile2.addEventListener("change", uploadImage2);

    function uploadImage2(){
        let imgLink2 = URL.createObjectURL(inputFile2.files[0]);
        imageView2.style.backgroundImage = `url(${imgLink2})`;
        // imageView.textContent = "";
        // imageView.style.border = 0;

        queuedImage2 = inputFile2.files[0];
    }

    dropArea2.addEventListener("dragover", function(e){
        e.preventDefault();
    });

    dropArea2.addEventListener("drop", function(e){
        e.preventDefault();

        // Menambahkan gambar yang di-drop ke dalam queuedImage
        uploadImage2();
    })

    // Event listener untuk tombol "Save"
    const saveButton2 = document.querySelector(".save-btn-menu2");
    // saveButton2.addEventListener("click", sendQueuedImagesToServer2);

    saveButton2.addEventListener("click", () => {
        if (queuedImage2 === null){
            var backgroundImageValue = document.querySelector('#img-view2').style.backgroundImage;
            backgroundImage = backgroundImageValue.replace('url("', '').replace('")', '');
            console.log(backgroundImage);

            updateMenuToServer(backgroundImage);
        }
        else{
            sendQueuedImagesToServer2();
        }
    });

    function updateMenuToServer(path) {
        // Select the element by class name and attribute
        const element = document.querySelector('.menu-update[update-id]');

        // Get the value of the update-id attribute
        // const id = element.getAttribute('update-id');
        // const id = document.querySelector('input[name=id2]').value;
        // console.log(id)
        const id = document.querySelector('.update-menu-container').dataset.menuIDdb;
        const name = document.querySelector('input[name="name2"]').value;
        const image = path;
        const price = document.querySelector('input[name="price2"]').value;
        const type = document.querySelector('select[name="type2"]').value;

        const requestBody = {
            id: id,
            name: name,
            price: price,
            image: image,
            type: type
        };
        // Send a PUT request to update the menu item
        fetch(`/menus/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json(); // Assuming server responds with JSON
        })
        .then(data => {
            console.log('Menu updated successfully:', data);
            location.reload(); // Reload the page after successful update
        })
        .catch(error => {
            console.error('Error updating menu:', error);
        });
    }

    function sendQueuedImagesToServer2() {
        // Pastikan ada gambar yang dipilih sebelum mengirim
        if (!queuedImage2) {
            console.error("No image selected.");
            return;
        }

        const formData = new FormData();

        // Menambahkan gambar yanga da di queuedImage ke dalam formData
        formData.append("file", queuedImage2);

        // Mengirim formData ke server
        
        fetch("/dashboard/upload", {
            method: "POST",
            body: formData
        })

        .then(response => {
            if (response.status !== 200) throw Error(response.statusText);
            return response.text();
        })

        .then(data => {
            // Data di sini akan berisi path file yang dikirim kembali oleh server
            pathfile = "../assets/menu/uploads/" + data;

            updateMenuToServer(pathfile);
        })

        .catch(error => {
            // serverMessage.innerHTML = error
            console.error("Error:", error);
        })
    }

    // Event listener untuk tombol penghapusan
    document.querySelector('.delete-btn').addEventListener('click', () => {
        // Dapatkan ID menu yang akan dihapus dari data di dalam popup konfirmasi
        const menuID = document.querySelector('.delete-menu-container').dataset.menuID;
        // 
        if (menuID) {
            fetch(`/menus/${menuID}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    console.log(`Menu with ID ${menuID} has been deleted.`);
                } else {
                    console.error(`Error deleting menu item. ${menuId}`);
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        } else {
            console.error('Menu ID is undefined.');
        }
        // Sembunyikan overlay
        const overlay = document.querySelector('.overlay');
        overlay.style.top = "-100%";
        overlay.style.opacity = "0";
        // Sembunyikan kontainer penghapusan
        const deleteMenuContainer = document.querySelector('.delete-menu-container');
        deleteMenuContainer.style.display = '150%';
        deleteMenuContainer.style.transform = 'translate(-50%, -50%)';
        deleteMenuContainer.style.display = 'none';
        // REFRESH PAGE SO THAT THE ID IS UPDATED
        window.location.reload();
    });

    // Event listener untuk tombol pembatalan di menu baru
    document.querySelector('.cancel-btn-menu').addEventListener('click', () => {
        // Sembunyikan overlay
        const overlay = document.querySelector('.overlay');
        overlay.style.top = "-100%";
        overlay.style.opacity = "0";

        // Sembunyikan kontainer menu baru
        const newMenuContainer = document.querySelector('.new-menu-container');
        newMenuContainer.style.display = '150%';
        newMenuContainer.style.transform = 'translate(-50%, -50%)';
        newMenuContainer.style.display = 'none';

        window.location.reload();
    });

    // Event listener untuk tombol pembatalan di menu baru
    document.querySelector('.cancel-btn-menu2').addEventListener('click', () => {
        // Sembunyikan overlay
        const overlay = document.querySelector('.overlay');
        overlay.style.top = "-100%";
        overlay.style.opacity = "0";

        // Sembunyikan kontainer menu baru
        const newMenuContainer = document.querySelector('.update-menu-container');
        newMenuContainer.style.display = '150%';
        newMenuContainer.style.transform = 'translate(-50%, -50%)';
        newMenuContainer.style.display = 'none';

        window.location.reload();
    });
</script>