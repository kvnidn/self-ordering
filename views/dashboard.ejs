<main id="site-main">

    <a href="/dashboard/add_menus" class="add-menu">
        <!-- <span class="material-icons-sharp">add</span> -->
        +
    </a>

    <div class="dashboard-container">

        <a href="/dashboard/add_menus" class="add-menu-btn">
                <span class="material-icons-sharp">add</span>
                Add Menu
        </a>

        <form action="/dashboard" method="POST">
            <table class="menu-table">
                <thead>
                    <tr>
                        <th class="sortable">ID</th>
                        <th>Image</th>
                        <th class="sortable">Name</th>
                        <th class="sortable">Price</th>
                        <th class="sortable">Type</th>
                        <th>Action</th>
                    </tr>
                </thead>

                <tbody>
                    <% for(var i=0; i < menu.length; i++) { %>
                    <tr>
                        <td><%= i+1 %></td>
                        <td><img src="<%= menu[i].image %>" width="150px"></td>
                        <td><%= menu[i].name %></td>
                        <td><%= menu[i].price %></td>
                        <td><%= menu[i].type %></td>
                        <td>
                            <div class="menu-modify-btn">
                                <a href="/dashboard/update_menus?id=<%=menu[i]._id %>" class="menu-update">
                                    <span class="material-icons-sharp">
                                        edit
                                    </span>
                                </a>

                                <a href="#" class="menu-delete"  data-id="<%= menu[i]._id %>">
                                    <span class="material-icons-sharp">
                                        delete
                                    </span>
                                </a>
                            </div>
                        </td>
                    </tr>
                    <% } %>
                </tbody>
            </table>
        </form>
    </div>
</main>

<script>
    const deleteLinks = document.querySelectorAll('.delete');

    deleteLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();

            const menuId = e.currentTarget.getAttribute('data-id');

            if (menuId) {
                fetch(`/menus/${menuId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        console.log(`Menu with ID ${menuId} has been deleted.`);
                        // REFRESH PAGE SO THAT THE ID IS UPDATED
                        window.location.reload();
                    } else {
                        console.error(`Error deleting menu item. ${menuId}`);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            } else {
                console.error('Menu ID is undefined.');
            }
        });
    });

    // Sort Tables

    /**
     * 
     * @param {HTMLTableElement} table
     * @param {number} column The index of the column to sort
     * @param {boolean} asc Determines if the sorting will be in ascending
     */

    function sortTableByColumn(table, column, asc = true){
        const dirModifier = asc ? 1 : -1;
        const tBody = table.tBodies[0];
        const rows = Array.from(tBody.querySelectorAll("tr"));

        // Sort each row (kalau dia String)
        const sortedRows = rows.sort((a, b) => {
            const aColText = a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();
            const bColText = b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();

            return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
        });

        // Remove all existing TRs from the table
        while (tBody.firstChild){
            tBody.removeChild(tBody.firstChild);
        }

        // Re-add the newly sorted rows
        tBody.append(...sortedRows);

        // Remember how the column is currently sorted
        table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
        table.querySelector(`th:nth-child(${ column + 1 })`).classList.toggle("th-sort-asc", asc);
        table.querySelector(`th:nth-child(${ column + 1 })`).classList.toggle("th-sort-desc", !asc);
    }

    function sortTableByColumnNumerical(table, column, asc = true){
        const dirModifier = asc ? 1 : -1;
        const tBody = table.tBodies[0];
        const rows = Array.from(tBody.querySelectorAll("tr"));

        // Sort each row
        const sortedRows = rows.sort((a, b) => {
            const aColText = parseFloat(a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim());
            const bColText = parseFloat(b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim());

            // return aColText - bColText; // Perbandingan angka langsung
            return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
        });


        // Remove all existing TRs from the table
        while (tBody.firstChild){
            tBody.removeChild(tBody.firstChild);
        }

        // Re-add the newly sorted rows
        tBody.append(...sortedRows);

        // Remember how the column is currently sorted
        table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
        table.querySelector(`th:nth-child(${ column + 1 })`).classList.toggle("th-sort-asc", asc);
        table.querySelector(`th:nth-child(${ column + 1 })`).classList.toggle("th-sort-desc", !asc);
    }

    // sortTableByColumn(document.querySelector("table"), 1, true);

    document.querySelectorAll(".menu-table th").forEach(headerCell => {
        headerCell.addEventListener("click", () => {
            const tableElement = headerCell.parentElement.parentElement.parentElement;
            const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
            const currentIsAscending = headerCell.classList.contains("th-sort-asc");

            if ([2,4].includes(headerIndex)){
                // console.log(headerIndex)
                sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
            }
            if ([0,3].includes(headerIndex)){
                sortTableByColumnNumerical(tableElement, headerIndex, !currentIsAscending);
            }
        });
    })
</script>